// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SerendipityLO
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFAudio
import AppTrackingTransparency
import BackgroundTasks
import CoreImage.CIFilterBuiltins
import Combine
import CoreData
import CoreImage
import CoreLocation
import CoreTelephony
import CovaticUtilities
import CryptoKit
import Foundation
import GameplayKit
import NaturalLanguage
import Network
import NotificationCenter
import SQLite3
import Swift
import SwiftData
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _SwiftData_SwiftUI
import os.log
import os
extension SerendipityLO.GenderDataMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.GenderDataMO>
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasProcessed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dateDataRequested: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tokenisedName: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.GenderDataMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.FwOpsMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.FwOpsMO>
  @objc @NSManaged dynamic public var apiName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var statusCode: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.NotificationPayloadMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.NotificationPayloadMO>
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var resourceUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var urlLink: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var promotion: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationAction: SerendipityLO.NotificationActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.NotificationPayloadMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CloudMessagingTokenMO) public class CloudMessagingTokenMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.CloudMessagingTokenMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.CloudMessagingToken?
  public typealias Entity = SerendipityLO.CloudMessagingToken
}
extension SerendipityLO.CloudMessagingToken : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.CloudMessagingTokenMO?
  public typealias ManagedObject = SerendipityLO.CloudMessagingTokenMO
}
extension SerendipityLO.CloudMessagingToken : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_inheritsConvenienceInitializers @objc(SemanticPOISMO) public class SemanticPOISMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.SemanticPOISMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SemanticPoi?
  public typealias Entity = SerendipityLO.SemanticPoi
}
extension SerendipityLO.SemanticPoi : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.SemanticPOISMO?
  public typealias ManagedObject = SerendipityLO.SemanticPOISMO
}
extension SerendipityLO.SemanticPoi : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public struct ConnectionEvent : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(SetIDStoreMO) public class SetIDStoreMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.SetIDStoreMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SetIDStore?
  public typealias Entity = SerendipityLO.SetIDStore
}
extension SerendipityLO.SetIDStore : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.SetIDStoreMO?
  public typealias ManagedObject = SerendipityLO.SetIDStoreMO
}
extension SerendipityLO.SetIDStore : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public enum ArticleKeys : Swift.String, Swift.CaseIterable {
  case headline
  case byline
  case articleURL
  case contentId
  case sectionName
  case contentType
  case TopicsTags
  case lastUpdated
  case contentAuthor
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SerendipityLO.ArticleKeys]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [SerendipityLO.ArticleKeys] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ArticleConsumption {
}
@_inheritsConvenienceInitializers @objc(SeiCodeMO) public class SeiCodeMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.SeiCodeMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SeiCode?
  public typealias Entity = SerendipityLO.SeiCode
}
extension SerendipityLO.SeiCode : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.SeiCodeMO?
  public typealias ManagedObject = SerendipityLO.SeiCodeMO
}
extension SerendipityLO.SeiCode : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public struct ProfileErrors : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SerendipityLO.PointLocationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.PointLocationMO>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var count: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lng: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mClusterReference: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var protoPointStatus: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vanillaPointStatus: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centerPoint: SerendipityLO.MultiClusterMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var noisePoints: SerendipityLO.NoiseClusterMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var outerPoint: SerendipityLO.MultiClusterMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var points: SerendipityLO.MultiClusterMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var xyPosition: SerendipityLO.XYCoordMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.ConnectionEventMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.ConnectionEventMO>
  @objc @NSManaged dynamic public var metadata: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var direction: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var portName: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.ConnectionEventMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
public struct SDLocation : Swift.Codable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SerendipityLO.SDLocation, rhs: SerendipityLO.SDLocation) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct ProfileAction : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NotificationAction : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NotificationPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WoosAction : Swift.Codable {
  public struct RangeAction : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct JourneyAction : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CalendarAction : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ProfileAudienceSegment {
  @objc deinit
}
extension SerendipityLO.ProfileAudienceSegment : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SerendipityLO.ProfileAudienceSegment, rhs: SerendipityLO.ProfileAudienceSegment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct MonitorData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SemanticPoi {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SeiCode {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(StreamingHearbeatMO) public class StreamingHearbeatMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(RangeActionMO) public class RangeActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.RangeActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.WoosAction.RangeAction?
  public typealias Entity = SerendipityLO.WoosAction.RangeAction
}
extension SerendipityLO.WoosAction.RangeAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.RangeActionMO?
  public typealias ManagedObject = SerendipityLO.RangeActionMO
}
extension SerendipityLO.CalendarActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.CalendarActionMO>
  @objc @NSManaged dynamic public var absolute: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationAction: SerendipityLO.NotificationActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.CalendarActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
public struct SDCovaticLog : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class SetIDStore : Swift.Hashable {
  public static func == (lhs: SerendipityLO.SetIDStore, rhs: SerendipityLO.SetIDStore) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension SerendipityLO.MultiClusterMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.MultiClusterMO>
  @objc @NSManaged dynamic public var clusterRadius: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clusterType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasResidenceTag: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasSemanticTag: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ishighFideltyVisitedPlace: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isHomeResidence: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isMainCluster: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isResidence: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isWorkCluster: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postalCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var residenceOnDates: [Foundation.Date]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var semanticTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var stDev: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var seiCodes: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var livesIn: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var centerPoint: SerendipityLO.PointLocationMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var outerPoint: SerendipityLO.PointLocationMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var points: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.MultiClusterMO {
  @objc(addPointsObject:) @NSManaged dynamic public func addToPoints(_ value: SerendipityLO.PointLocationMO)
  @objc(removePointsObject:) @NSManaged dynamic public func removeFromPoints(_ value: SerendipityLO.PointLocationMO)
  @objc(addPoints:) @NSManaged dynamic public func addToPoints(_ values: Foundation.NSSet)
  @objc(removePoints:) @NSManaged dynamic public func removeFromPoints(_ values: Foundation.NSSet)
}
extension SerendipityLO.MultiClusterMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String?
}
extension SerendipityLO.WoosActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.WoosActionMO>
  @objc @NSManaged dynamic public var index: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var offset: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wooCommenceFrom: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var rangeAction: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationAction: SerendipityLO.NotificationActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.WoosActionMO {
  @objc(addRangeActionObject:) @NSManaged dynamic public func addToRangeAction(_ value: SerendipityLO.RangeActionMO)
  @objc(removeRangeActionObject:) @NSManaged dynamic public func removeFromRangeAction(_ value: SerendipityLO.RangeActionMO)
  @objc(addRangeAction:) @NSManaged dynamic public func addToRangeAction(_ values: Foundation.NSSet)
  @objc(removeRangeAction:) @NSManaged dynamic public func removeFromRangeAction(_ values: Foundation.NSSet)
}
extension SerendipityLO.WoosActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.StateEventMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.StateEventMO>
  @objc @NSManaged dynamic public var metadata: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var state: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shouldSend: Swift.Bool {
    @objc get
    @objc set
  }
}
extension SerendipityLO.StateEventMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(CodableGeofenceMO) public class CodableGeofenceMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.CodableGeofenceMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.CodableGeofence?
  public typealias Entity = SerendipityLO.CodableGeofence
}
extension SerendipityLO.CodableGeofence : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.CodableGeofenceMO?
  public typealias ManagedObject = SerendipityLO.CodableGeofenceMO
}
extension SerendipityLO.LocationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.LocationMO>
  @objc @NSManaged dynamic public var distanceAdjustered: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distanceDelta: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontalAccuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isPrecise: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isStationaryLocation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longtitude: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var strategyStateChange: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var switchToMoving: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var switchToStationary: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeDelta: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggerType: Swift.Int32 {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(GenderDataMO) public class GenderDataMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.GenderDataMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.GenderData?
  public typealias Entity = SerendipityLO.GenderData
}
extension SerendipityLO.GenderData : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.GenderDataMO?
  public typealias ManagedObject = SerendipityLO.GenderDataMO
}
extension SerendipityLO.GenderData : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public struct DebugBelongsToProfile {
  public let name: Swift.String
  public let target: Swift.String
  public var profileVersion: Swift.Int
  public var identificationState: Swift.String
  public init(name: Swift.String, target: Swift.String, profileVersion: Swift.Int, identificationStateRaw: Swift.String)
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Equatable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
extension SerendipityLO.SeiCodeMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.SeiCodeMO>
  @objc @NSManaged dynamic public var acorncode: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postcode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nuts3: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.SeiCodeMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.XYCoordMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.XYCoordMO>
  @objc @NSManaged dynamic public var x: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var y: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointLocation: SerendipityLO.PointLocationMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(SmartNotificationMO) public class SmartNotificationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.SmartNotificationMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SmartNotification?
  public typealias Entity = SerendipityLO.SmartNotification
}
extension SerendipityLO.SmartNotification : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.SmartNotificationMO?
  public typealias ManagedObject = SerendipityLO.SmartNotificationMO
}
extension SerendipityLO.SmartNotification : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
extension SerendipityLO.MediaConsumptionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.MediaConsumptionMO>
  @objc @NSManaged dynamic public var clusterTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var frameworkTags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAction: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAssetDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAssetIdentifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAssetTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaDelivery: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metaData: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var playHeadPosition: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tags: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geotile: Swift.String? {
    @objc get
    @objc set
  }
}
public struct ModeConfig {
  public init(activityRequested: Swift.Bool, locationRequested: Swift.Bool, smartNotificationsRequested: Swift.Bool, serviceDiscoveryRequested: Swift.Bool)
}
public struct ClientConfig {
  public init(clientId: Swift.String, sharedSecret: Swift.String, applicationName: Swift.String, urlString: Swift.String? = nil)
}
public enum SerendipityError : Swift.Error {
  case unitialised
  case invalidCredentials
  case noUserConsent
  case covaticError(Swift.String)
}
public enum UIModeType {
  case defaultUI
  case carUI
  case runningUI
  public static func == (a: SerendipityLO.UIModeType, b: SerendipityLO.UIModeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExternalConnectionSource : Swift.String {
  case isAudio
  case isAirplay
  case isAlexa
  case isCarPlay
  case isChromeCast
  case isBLE
  case isWiFi
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConnectionEventDirection : Swift.String, Swift.Codable {
  case connected
  case disconnected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(ActivityEventMO) public class ActivityEventMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.ActivityEventMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.ActivityEvent?
  public typealias Entity = CovaticUtilities.ActivityEvent
}
extension CovaticUtilities.ActivityEvent : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.ActivityEventMO?
  public typealias ManagedObject = SerendipityLO.ActivityEventMO
}
@_inheritsConvenienceInitializers @objc(LocationMO) public class LocationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.LocationMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SDLocation?
  public typealias Entity = SerendipityLO.SDLocation
}
extension SerendipityLO.SDLocation : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.LocationMO?
  public typealias ManagedObject = SerendipityLO.LocationMO
}
extension SerendipityLO.SDLocation : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_inheritsConvenienceInitializers @objc(ProfileActionMO) public class ProfileActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.ProfileActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.ProfileAction?
  public typealias Entity = SerendipityLO.ProfileAction
}
extension SerendipityLO.ProfileAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.ProfileActionMO?
  public typealias ManagedObject = SerendipityLO.ProfileActionMO
}
extension SerendipityLO.ProfileAction : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_inheritsConvenienceInitializers @objc(POIMO) public class POIMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.POIMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.PointsOfInterest?
  public typealias Entity = SerendipityLO.PointsOfInterest
}
extension SerendipityLO.PointsOfInterest : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.POIMO?
  public typealias ManagedObject = SerendipityLO.POIMO
}
extension SerendipityLO.PointsOfInterest : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
extension SerendipityLO.CloudMessagingTokenMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.CloudMessagingTokenMO>
  @objc @NSManaged dynamic public var token: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasUpdated: Swift.Bool {
    @objc get
    @objc set
  }
}
@available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct CovaticWebView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public var data: SerendipityLO.CovaticWebData
  @_Concurrency.MainActor @preconcurrency public init(data: SerendipityLO.CovaticWebData)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> SerendipityLO.CovaticWebView.Coordinator
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: SerendipityLO.CovaticWebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ webView: WebKit.WKWebView, context: SerendipityLO.CovaticWebView.Context)
  @objc @_Concurrency.MainActor @preconcurrency open class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
    @objc deinit
    @_Concurrency.MainActor @preconcurrency public init(data: SerendipityLO.CovaticWebData)
    @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
    @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
    @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
    @_Concurrency.MainActor @preconcurrency open func showError(title: Swift.String, message: Swift.String)
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, tvOS 13.0, *)
  @available(watchOS, unavailable)
  @available(macOS, unavailable)
  public typealias UIViewType = WebKit.WKWebView
}
extension SerendipityLO.SemanticPOISMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.SemanticPOISMO>
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lng: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointId: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.SemanticPOISMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(WoosActionMO) public class WoosActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.WoosActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.WoosAction?
  public typealias Entity = SerendipityLO.WoosAction
}
extension SerendipityLO.WoosAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.WoosActionMO?
  public typealias ManagedObject = SerendipityLO.WoosActionMO
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
final public class Serendipity {
  final public var framework: SerendipityLO.Framework?
  final public var analytics: SerendipityLO.Analytics?
  final public var insights: SerendipityLO.Insights?
  final public var smartNotifications: SerendipityLO.SmartNotifications?
  final public var covaticDebugAPI: SerendipityLO.CovaticDebugAPI?
  public static let sharedInstance: SerendipityLO.Serendipity
  @objc deinit
}
extension SerendipityLO.DemographicPredictedMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.DemographicPredictedMO>
  @objc @NSManaged dynamic public var ageRange: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var resolutionMode: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var iabAgeRange: Swift.String? {
    @objc get
    @objc set
  }
}
public struct ConsumptionEvent : Swift.Codable {
  public let startTime: Foundation.Date
  public let endTime: Foundation.Date
  public let type: SerendipityLO.ConsumptionEventType
  public let amount: Swift.Double
  public let duration: Swift.Int
  public let format: SerendipityLO.ConsumptionEventMediaFormat
  public let action: Swift.String
  public var metaData: [Swift.String : Swift.String]?
  public init(startTime: Foundation.Date, endTime: Foundation.Date, type: SerendipityLO.ConsumptionEventType, amount: Swift.Double, duration: Swift.Int, format: SerendipityLO.ConsumptionEventMediaFormat, action: Swift.String, metadata: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ConsumptionEventType : Swift.String, Swift.Codable {
  case media
  case advert
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsumptionEventMediaFormat : Swift.String, Swift.Codable {
  case audio
  case video
  case text
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsumptionEventActivity : Swift.String, Swift.Codable {
  case stationary
  case walking
  case running
  case cycling
  case automotive
  case bus
  case car
  case train
  case tube
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BatteryDataEntity : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ScheduledTask : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccountParam : Swift.String, Swift.CaseIterable {
  case gender
  case age
  case dob
  case postcode
  case zipcode
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SerendipityLO.AccountParam]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [SerendipityLO.AccountParam] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
public class AssignedProfilesSD {
  public var persistentBackingData: any SwiftData.BackingData<SerendipityLO.AssignedProfilesSD> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  required public init(backingData: any SwiftData.BackingData<SerendipityLO.AssignedProfilesSD>)
  @objc deinit
}
@available(iOS 17.0, *)
extension SerendipityLO.AssignedProfilesSD : SwiftData.PersistentModel {
  @available(iOS 17.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = SwiftData.PersistentIdentifier
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
extension SerendipityLO.AssignedProfilesSD : Observation.Observable {
}
public struct CodableGeofence : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StateEvent : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SerendipityLO.JourneyActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.JourneyActionMO>
  @objc @NSManaged dynamic public var setId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var direction: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationAction: SerendipityLO.NotificationActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.JourneyActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.NoiseClusterMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.NoiseClusterMO>
  @objc @NSManaged dynamic public var clusterType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var noisePoints: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.NoiseClusterMO {
  @objc(addNoisePointsObject:) @NSManaged dynamic public func addToNoisePoints(_ value: SerendipityLO.PointLocationMO)
  @objc(removeNoisePointsObject:) @NSManaged dynamic public func removeFromNoisePoints(_ value: SerendipityLO.PointLocationMO)
  @objc(addNoisePoints:) @NSManaged dynamic public func addToNoisePoints(_ values: Foundation.NSSet)
  @objc(removeNoisePoints:) @NSManaged dynamic public func removeFromNoisePoints(_ values: Foundation.NSSet)
}
extension SerendipityLO.NoiseClusterMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.ProfileAudienceSegmentMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.ProfileAudienceSegmentMO>
  @objc @NSManaged dynamic public var profileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var query: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isExternal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cvcqlVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updateEvery: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identificationState: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var profileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expiryDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastEvaluatedTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var annotations: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var annotationsPOIDependencies: [Swift.String]? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(ProfileAudienceSegmentMO) public class ProfileAudienceSegmentMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.ProfileAudienceSegmentMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.ProfileAudienceSegment?
  public typealias Entity = SerendipityLO.ProfileAudienceSegment
}
extension SerendipityLO.ProfileAudienceSegment : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.ProfileAudienceSegmentMO?
  public typealias ManagedObject = SerendipityLO.ProfileAudienceSegmentMO
}
extension SerendipityLO.ProfileAudienceSegment : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_hasMissingDesignatedInitializers public class CloudMessagingToken {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CovaticLogMO) public class CovaticLogMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.CovaticLogMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.SDCovaticLog?
  public typealias Entity = SerendipityLO.SDCovaticLog
}
extension SerendipityLO.SDCovaticLog : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.CovaticLogMO?
  public typealias ManagedObject = SerendipityLO.CovaticLogMO
}
public enum CovaticWebViewNavigation {
  case backward, forward, reload, load
  public static func == (a: SerendipityLO.CovaticWebViewNavigation, b: SerendipityLO.CovaticWebViewNavigation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
open class CovaticWebData : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($loading) public var loading: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $loading: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($url) public var url: Foundation.URL? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($vCanGoBack) public var vCanGoBack: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $vCanGoBack: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($vCanGoForward) public var vCanGoForward: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $vCanGoForward: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(url: Foundation.URL)
  public var webViewNavigationPublisher: Combine.PassthroughSubject<SerendipityLO.CovaticWebViewNavigation, Swift.Never>
  open func back()
  open func forward()
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct FwOpsObject : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(AppStateMO) public class AppStateMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.AppStateMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.AppStateEntity?
  public typealias Entity = SerendipityLO.AppStateEntity
}
extension SerendipityLO.AppStateEntity : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.AppStateMO?
  public typealias ManagedObject = SerendipityLO.AppStateMO
}
@_hasMissingDesignatedInitializers public class Analytics {
  public func updateConsumptionDetail(_ consumption: SerendipityLO.MediaConsumption)
  public func notifyConnectionEvent(source: SerendipityLO.ExternalConnectionSource, direction: SerendipityLO.ConnectionEventDirection = .connected, extraInfo: [Swift.String : Swift.String]?)
  public func notifyEvent(consumption: SerendipityLO.MediaConsumption)
  public func notifyPlayerEvent(from: SerendipityLO.MediaConsumption, to: SerendipityLO.MediaConsumption)
  public func notifyEvent(account: SerendipityLO.AccountEvent, metadata: [Swift.String : Swift.String]? = nil)
  public func notifyEvent(willViewContent: SerendipityLO.ViewableContent, withPage: SerendipityLO.PageView?)
  public func notifyEvent(didViewContent: SerendipityLO.ViewableContent, withPage: SerendipityLO.PageView?)
  public func notifyEvent(willViewPage: SerendipityLO.PageView)
  public func notifyEvent(didViewPage: SerendipityLO.PageView)
  public func notifyEvent(contentSearched: SerendipityLO.SearchEvent)
  public func notifyEvent(interaction: SerendipityLO.ContentInteraction, content: SerendipityLO.ViewableContent)
  @available(*, deprecated, message: "Update to notifyCustomEvent(data")
  public func notifyEvent(custom: SerendipityLO.CustomEvent)
  public func notifyCustomEvent(data: [Swift.String : Swift.String])
  public func articleStarted(contentId: Swift.String, data: [Swift.String : Swift.String])
  public func articleFinished(contentId: Swift.String)
  public func sessionFromUrl(application: UIKit.UIApplication, withUrl: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:])
  public func sessionContinueActivity(application: UIKit.UIApplication, continueActivity: Foundation.NSUserActivity, restoring: [any UIKit.UIUserActivityRestoring]?)
  @objc deinit
}
public struct GeoPoint : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MediaConsumption : Swift.Codable {
  public var metadata: [Swift.String : Swift.String]?
  public var mediaAssetDuration: Swift.Double?
  public var playHeadPosition: Swift.Double?
  public enum Action : Swift.String, Swift.Codable {
    case commenceMedia
    case ceaseMedia
    case skipForwardFrom
    case skipForwardTo
    case skipBackwardFrom
    case skipBackwardTo
    case seekFrom
    case seekTo
    case autoContinueFrom
    case autoContinueTo
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var mediaDelivery: SerendipityLO.MediaConsumption.MediaDelivery?
  public enum MediaDelivery : Swift.String, Swift.Codable {
    case streamed
    case downloaded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(mediaAssetIdentifier: Swift.String, mediaAssetTitle: Swift.String? = nil, metadata: [Swift.String : Swift.String]? = nil, mediaAssetDuration: Swift.Double? = nil, playHeadPosition: Swift.Double? = nil, mediaAction: SerendipityLO.MediaConsumption.Action, mediaDelivery: SerendipityLO.MediaConsumption.MediaDelivery? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SerendipityLO.RequestManagerMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.RequestManagerMO>
  @objc @NSManaged dynamic public var additionalInfo: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var completeTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var previousLastSent: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var requestInitalisedTime: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var success: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var urlEndpoint: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(RequestManagerMO) public class RequestManagerMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.RequestManagerMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.RequestManagerCache?
  public typealias Entity = SerendipityLO.RequestManagerCache
}
extension SerendipityLO.RequestManagerCache : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.RequestManagerMO?
  public typealias ManagedObject = SerendipityLO.RequestManagerMO
}
@_inheritsConvenienceInitializers @objc(GeoPointsMO) public class GeoPointsMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.GeoPointsMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.GeoPoint?
  public typealias Entity = SerendipityLO.GeoPoint
}
extension SerendipityLO.GeoPoint : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.GeoPointsMO?
  public typealias ManagedObject = SerendipityLO.GeoPointsMO
}
public enum ContentInteraction : Swift.String, Swift.Codable {
  case isLiked
  case isDisliked
  case isRated
  case inWatchListed
  case deWatchListed
  case isPurchased
  case isRented
  case isShared
  case isDownloaded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ViewableContent : Swift.Codable {
  public var contentInteraction: SerendipityLO.ContentInteraction?
  public var metadata: [Swift.String : Swift.String]?
  public var userRating: Swift.Int?
  public var inclusiveRating: Swift.Int?
  public var contentType: Swift.String?
  public init?(assetIdentifier: Swift.String? = nil, assetTitle: Swift.String? = nil, metadata: [Swift.String : Swift.String]? = nil, userRating: Swift.Int? = nil, inclusiveRating: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PageView : Swift.Codable {
  public let type: SerendipityLO.PageType
  public var title: Swift.String?
  public var contentType: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccountAction : Swift.String, Swift.Codable {
  case setting
  case signIn
  case signOut
  case openAccount
  case guestAccount
  case trialAccount
  case upgradeAccount
  case updateDetails
  case deleteAccount
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AccountType {
  case subscriptionAccount(Swift.String?)
  case freeAccount
  case guestAccount
  case trialAccount
  case customAccount(Swift.String)
}
public struct AccountEvent {
  public var accountAddOn: Swift.String?
  public let accountAction: SerendipityLO.AccountAction
  public let accountType: SerendipityLO.AccountType
  public var oldAccountType: SerendipityLO.AccountType?
  public init(accountAddOn: Swift.String?, accountAction: SerendipityLO.AccountAction, accountType: SerendipityLO.AccountType, oldAccountType: SerendipityLO.AccountType?)
}
public struct SearchEvent : Swift.Codable {
  public var contentType: Swift.String?
  public var searchTerm: Swift.String?
  public var contentTags: [Swift.String]?
  public var resultCount: Swift.Int?
  public var metadata: [Swift.String : Swift.String]?
  public init(contentType: Swift.String?, searchTerm: Swift.String?, contentTags: [Swift.String]?, resultCount: Swift.Int?, metadata: [Swift.String : Swift.String]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum PageType : Swift.String, Swift.Codable {
  case home
  case menu
  case settings
  case account
  case search
  case list
  case detail
  case split
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CustomEvent : Swift.Codable {
  public var type: Swift.String
  public var title: Swift.String?
  public var metadata: [Swift.String : Swift.String]?
  public init(type: Swift.String, title: Swift.String?, metadata: [Swift.String : Swift.String]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(NoiseClusterMO) public class NoiseClusterMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.NoiseClusterMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.NoiseCluster<CovaticUtilities.PointLocation>?
  public typealias Entity = CovaticUtilities.NoiseCluster<CovaticUtilities.PointLocation>
}
extension CovaticUtilities.NoiseCluster : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.NoiseClusterMO?
  public typealias ManagedObject = SerendipityLO.NoiseClusterMO
}
extension CovaticUtilities.NoiseCluster : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_inheritsConvenienceInitializers @objc(GeoTileMO) public class GeoTileMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.GeoTileMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.GeoTile?
  public typealias Entity = SerendipityLO.GeoTile
}
extension SerendipityLO.GeoTile : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.GeoTileMO?
  public typealias ManagedObject = SerendipityLO.GeoTileMO
}
extension SerendipityLO.GeoTile : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_hasMissingDesignatedInitializers public class GeoTile : Swift.Hashable {
  public static func == (lhs: SerendipityLO.GeoTile, rhs: SerendipityLO.GeoTile) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension SerendipityLO.CovaticLogMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.CovaticLogMO>
  @objc @NSManaged dynamic public var log: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logType: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.CovaticLogMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(PointLocationMO) public class PointLocationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.PointLocationMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.PointLocation?
  public typealias Entity = CovaticUtilities.PointLocation
}
extension CovaticUtilities.PointLocation : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.PointLocationMO?
  public typealias ManagedObject = SerendipityLO.PointLocationMO
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
final public class CovaticDebugAPI {
  public static let sharedInstance: SerendipityLO.CovaticDebugAPI?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BatteryDataMO) public class BatteryDataMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.BatteryDataMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.BatteryDataEntity?
  public typealias Entity = SerendipityLO.BatteryDataEntity
}
extension SerendipityLO.BatteryDataEntity : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.BatteryDataMO?
  public typealias ManagedObject = SerendipityLO.BatteryDataMO
}
@_hasMissingDesignatedInitializers public class GenderData {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MultiClusterMO) public class MultiClusterMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.MultiClusterMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.MultiCluster<CovaticUtilities.PointLocation>?
  public typealias Entity = CovaticUtilities.MultiCluster<CovaticUtilities.PointLocation>
}
extension CovaticUtilities.MultiCluster : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.MultiClusterMO?
  public typealias ManagedObject = SerendipityLO.MultiClusterMO
}
extension CovaticUtilities.MultiCluster : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
@_inheritsConvenienceInitializers @objc(BaseWindowMO) public class BaseWindowMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.BaseWindowMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.BaseWindow?
  public typealias Entity = CovaticUtilities.BaseWindow
}
extension CovaticUtilities.BaseWindow : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.BaseWindowMO?
  public typealias ManagedObject = SerendipityLO.BaseWindowMO
}
extension SerendipityLO.NotificationActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.NotificationActionMO>
  @objc @NSManaged dynamic public var payload: SerendipityLO.NotificationPayloadMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wooAction: SerendipityLO.WoosActionMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var calendarAction: SerendipityLO.CalendarActionMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var journeyAction: SerendipityLO.JourneyActionMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var profileAction: SerendipityLO.ProfileActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.NotificationActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
public enum APIError : Swift.Error {
  case isEmptyString
  case notAlphaNumericString
  public static func == (a: SerendipityLO.APIError, b: SerendipityLO.APIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class Insights {
  public typealias AudienceArrayListener = ([Swift.String]) -> Swift.Void
  public typealias AdsSegmentsChangeListener = ([Swift.String]) -> Swift.Void
  public typealias AdSegmentsChangeListener = (Swift.String) -> Swift.Void
  public func setLinkingHash(_ hashString: Swift.String) throws
  public func setLinkingHashes(_ hashedStrings: [Swift.String]) throws
  public func getLinkedAudiences(audienceSegmentsListener: @escaping SerendipityLO.Insights.AudienceArrayListener)
  public func getAudiences(audienceSegmentsListener: @escaping SerendipityLO.Insights.AudienceArrayListener)
  @available(*, deprecated, message: "This function will be deprecated in the near furture. Use getAudiencesArray instead")
  public func getAdsMeta(adSegmentsChangeListener: SerendipityLO.Insights.AdsSegmentsChangeListener? = nil, completionHandler: @escaping (Swift.Result<[Swift.String], SerendipityLO.SerendipityError>) -> Swift.Void)
  @available(*, deprecated, message: "This function will be deprecated in the near furture. Use getAudiencesString instead")
  public func getAdMeta(adSegmentsChangeListener: SerendipityLO.Insights.AdSegmentsChangeListener? = nil, completionHandler: @escaping (Swift.Result<Swift.String, SerendipityLO.SerendipityError>) -> Swift.Void)
  public func requestProfilesEvaluate()
  @objc deinit
}
extension SerendipityLO.AppStateMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.AppStateMO>
  @objc @NSManaged dynamic public var appStateEvent: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
}
@available(*, deprecated, message: "Type no longer used")
public enum AppState : Swift.String, Swift.Codable {
  case appOpened
  case appClosed
  case foreground
  case background
  case active
  case inActive
  public init?(rawValue: Swift.String)
  @available(*, deprecated, message: "Type no longer used")
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RequestManagerCache {
}
@_inheritsConvenienceInitializers @objc(NotificationActionMO) public class NotificationActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.NotificationActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.NotificationAction?
  public typealias Entity = SerendipityLO.NotificationAction
}
extension SerendipityLO.NotificationAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.NotificationActionMO?
  public typealias ManagedObject = SerendipityLO.NotificationActionMO
}
extension SerendipityLO.POIMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.POIMO>
  @objc @NSManaged dynamic public var geoTileId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geoPoints: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.POIMO {
  @objc(addGeoPointsObject:) @NSManaged dynamic public func addToGeoPoints(_ value: SerendipityLO.GeoPointsMO)
  @objc(removeGeoPointsObject:) @NSManaged dynamic public func removeFromGeoPoints(_ value: SerendipityLO.GeoPointsMO)
  @objc(addGeoPoints:) @NSManaged dynamic public func addToGeoPoints(_ values: Foundation.NSSet)
  @objc(removeGeoPoints:) @NSManaged dynamic public func removeFromGeoPoints(_ values: Foundation.NSSet)
}
@_hasMissingDesignatedInitializers @available(iOS 17.0, *)
public class AudienceProfileSD {
  public var persistentBackingData: any SwiftData.BackingData<SerendipityLO.AudienceProfileSD> {
    get
    set
  }
  public static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
    get
  }
  required public init(backingData: any SwiftData.BackingData<SerendipityLO.AudienceProfileSD>)
  @objc deinit
}
@available(iOS 17.0, *)
extension SerendipityLO.AudienceProfileSD : SwiftData.PersistentModel {
  @available(iOS 17.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = SwiftData.PersistentIdentifier
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 17.0, *)
extension SerendipityLO.AudienceProfileSD : Observation.Observable {
}
@_inheritsConvenienceInitializers @objc(ProfileErrorsMO) public class ProfileErrorsMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.ProfileErrorsMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.ProfileErrors?
  public typealias Entity = SerendipityLO.ProfileErrors
}
extension SerendipityLO.ProfileErrors : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.ProfileErrorsMO?
  public typealias ManagedObject = SerendipityLO.ProfileErrorsMO
}
@_inheritsConvenienceInitializers @objc(ConnectionEventMO) public class ConnectionEventMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.ConnectionEventMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.ConnectionEvent?
  public typealias Entity = SerendipityLO.ConnectionEvent
}
extension SerendipityLO.ConnectionEvent : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.ConnectionEventMO?
  public typealias ManagedObject = SerendipityLO.ConnectionEventMO
}
@_inheritsConvenienceInitializers @objc(CoreAlgoMO) public class CoreAlgoMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.CoreAlgoMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.CoreAlgoEntity?
  public typealias Entity = SerendipityLO.CoreAlgoEntity
}
extension SerendipityLO.CoreAlgoEntity : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.CoreAlgoMO?
  public typealias ManagedObject = SerendipityLO.CoreAlgoMO
}
@_inheritsConvenienceInitializers @objc(AccountCacheMO) public class AccountCacheMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.AccountCacheMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.AccountCache?
  public typealias Entity = SerendipityLO.AccountCache
}
extension SerendipityLO.AccountCache : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.AccountCacheMO?
  public typealias ManagedObject = SerendipityLO.AccountCacheMO
}
extension SerendipityLO.AccountCache : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public var evalOuterHTMLHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)?
public var docOuterHTMLString: Swift.String
public func processWebViewOnFinishedNavigation(_ webView: WebKit.WKWebView)
extension SerendipityLO.AccountCacheMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.AccountCacheMO>
  @objc @NSManaged dynamic public var accountAction: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var accountType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var age: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dob: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var dobStringValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gender: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var meta: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postcode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var zipcode: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.GeoTileMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.GeoTileMO>
  @objc @NSManaged dynamic public var geoTileID: Swift.String? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CovaticWebViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency open var webView: WebKit.WKWebView!
  @_Concurrency.MainActor @preconcurrency open var urlLink: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func loadURL()
  @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc open func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(JourneyActionMO) public class JourneyActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.JourneyActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.JourneyAction?
  public typealias Entity = SerendipityLO.JourneyAction
}
extension SerendipityLO.JourneyAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.JourneyActionMO?
  public typealias ManagedObject = SerendipityLO.JourneyActionMO
}
public struct SmartNotification {
}
extension SerendipityLO.ProfileActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.ProfileActionMO>
  @objc @NSManaged dynamic public var actionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var cvcqlVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expires: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minVersion: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var profileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notificationAction: SerendipityLO.NotificationActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.ProfileActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
public struct CoreAlgoEntity {
  public func encode(to encoder: any Swift.Encoder) throws
}
extension SerendipityLO.StreamingHearbeatMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.StreamingHearbeatMO>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isConcluded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAssetTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var metadata: [Swift.String : Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaAssetDuration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mediaDelivery: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezoneId: Swift.String? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class ProfileAssignment : Swift.Codable {
  convenience required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(MediaConsumptionMO) public class MediaConsumptionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.MediaConsumptionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.MediaConsumption?
  public typealias Entity = SerendipityLO.MediaConsumption
}
extension SerendipityLO.MediaConsumption : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.MediaConsumptionMO?
  public typealias ManagedObject = SerendipityLO.MediaConsumptionMO
}
@_inheritsConvenienceInitializers @objc(FwOpsMO) public class FwOpsMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.FwOpsMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.FwOpsObject?
  public typealias Entity = SerendipityLO.FwOpsObject
}
extension SerendipityLO.FwOpsObject : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.FwOpsMO?
  public typealias ManagedObject = SerendipityLO.FwOpsMO
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class Framework {
  public func setFramework(mode: SerendipityLO.ModeConfig)
  public func setDebug(_ isDebug: Swift.Bool)
  public func launchWith(clientConfig: SerendipityLO.ClientConfig, completionHandler: @escaping (Swift.Result<Any?, SerendipityLO.SerendipityError>) -> Swift.Void)
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func willHandleEventsForBackgroundURLSession(completionHandler: @escaping () -> Swift.Void, identifier: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "Now offers automatic integration with TCF or option to manaully set with setAdPersonalisation. See documentation for further details")
  public func consentsGranted(consent: Swift.Bool)
  public func setAdPersonalisation(isEnabled: Swift.Bool)
  @available(*, deprecated, message: "Now handled by SDK")
  public func notifyAppState(appState: SerendipityLO.AppState)
  @available(*, deprecated, message: "Function not applicable")
  public func exportUserData(completionHandler: @escaping (Swift.Result<Any, SerendipityLO.SerendipityError>) -> Swift.Void)
  @available(*, deprecated, message: "Function not applicable")
  public func deleteUserData(completionHandler: @escaping (Swift.Result<Any, SerendipityLO.SerendipityError>) -> Swift.Void)
  @objc deinit
}
public struct AppStateEntity : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SerendipityLO.BatteryDataMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.BatteryDataMO>
  @objc @NSManaged dynamic public var level: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(StateEventMO) public class StateEventMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.StateEventMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.StateEvent?
  public typealias Entity = SerendipityLO.StateEvent
}
extension SerendipityLO.StateEvent : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.StateEventMO?
  public typealias ManagedObject = SerendipityLO.StateEventMO
}
extension SerendipityLO.CodableGeofenceMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.CodableGeofenceMO>
  @objc @NSManaged dynamic public var lng: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var radius: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notifyOnEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var notifyOnExit: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isActive: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DemographicPredictedMO) public class DemographicPredictedMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.DemographicPredictedMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.DemographicPredicted?
  public typealias Entity = SerendipityLO.DemographicPredicted
}
extension SerendipityLO.DemographicPredicted : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.DemographicPredictedMO?
  public typealias ManagedObject = SerendipityLO.DemographicPredictedMO
}
extension SerendipityLO.DemographicPredicted : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public typealias DeepLinkListener = (Foundation.URL) -> Swift.Void
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class SmartNotifications {
  public var deepLinkListener: SerendipityLO.DeepLinkListener?
  public func registerRemoteNotifications(_ application: UIKit.UIApplication, withDeviceToken: Foundation.Data)
  public func didFailToRegisterForRemoteNotifications(_ application: UIKit.UIApplication, withError error: any Swift.Error)
  public func isSerendipityRemoteNotification(didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  public func application(_ application: UIKit.UIApplication, didReceiveSmartNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  public func notificationCentre(willPresentNotification: UserNotifications.UNNotification)
  public func notificationCentre(didReceiveResponse: UserNotifications.UNNotificationResponse)
  @objc deinit
}
extension SerendipityLO.ProfileErrorsMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.ProfileErrorsMO>
  @objc @NSManaged dynamic public var actionId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var errorCode: Swift.Int32 {
    @objc get
    @objc set
  }
}
extension SerendipityLO.ProfileErrorsMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_inheritsConvenienceInitializers @objc(NotificationPayloadMO) public class NotificationPayloadMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.NotificationPayloadMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.NotificationPayload?
  public typealias Entity = SerendipityLO.NotificationPayload
}
extension SerendipityLO.NotificationPayload : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.NotificationPayloadMO?
  public typealias ManagedObject = SerendipityLO.NotificationPayloadMO
}
extension SerendipityLO.NotificationPayload : CovaticUtilities.ManagedObjectUpdateable {
  public func updateEntity(entity: CoreData.NSManagedObject?)
}
public struct PointsOfInterest {
}
extension SerendipityLO.CoreAlgoMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.CoreAlgoMO>
  @objc @NSManaged dynamic public var count: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var day: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.BaseWindowMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.BaseWindowMO>
  @objc @NSManaged dynamic public var start: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var end: Swift.Double {
    @objc get
    @objc set
  }
}
extension SerendipityLO.ActivityEventMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.ActivityEventMO>
  @objc @NSManaged dynamic public var activityType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var confidence: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezoneId: Swift.String? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class DemographicDataPredicted {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DemographicPredicted {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(CalendarActionMO) public class CalendarActionMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.CalendarActionMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> SerendipityLO.CalendarAction?
  public typealias Entity = SerendipityLO.CalendarAction
}
extension SerendipityLO.CalendarAction : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.CalendarActionMO?
  public typealias ManagedObject = SerendipityLO.CalendarActionMO
}
extension SerendipityLO.SmartNotificationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.SmartNotificationMO>
  @objc @NSManaged dynamic public var clicked: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var created: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var displayed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var errorDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var errorType: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var receivedDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var resolved: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var resolvedDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var foreground: Swift.Bool {
    @objc get
    @objc set
  }
}
extension SerendipityLO.SmartNotificationMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
extension SerendipityLO.GeoPointsMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.GeoPointsMO>
  @objc @NSManaged dynamic public var geoHash: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mode: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var poiId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pois: SerendipityLO.POIMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.RangeActionMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.RangeActionMO>
  @objc @NSManaged dynamic public var start: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var end: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var wooAction: SerendipityLO.WoosActionMO? {
    @objc get
    @objc set
  }
}
extension SerendipityLO.RangeActionMO : Swift.Identifiable {
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@_hasMissingDesignatedInitializers public class StreamingHearbeat : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(XYCoordMO) public class XYCoordMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SerendipityLO.XYCoordMO : CovaticUtilities.ManagedObjectProtocol {
  public func toEntity() -> CovaticUtilities.XYCoord?
  public typealias Entity = CovaticUtilities.XYCoord
}
extension CovaticUtilities.XYCoord : CovaticUtilities.ManagedObjectConvertible {
  public func toManagedObject(in context: CoreData.NSManagedObjectContext) -> SerendipityLO.XYCoordMO?
  public typealias ManagedObject = SerendipityLO.XYCoordMO
}
extension SerendipityLO.SetIDStoreMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SerendipityLO.SetIDStoreMO>
  @objc @NSManaged dynamic public var clusterTypes: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hasData: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isStaleData: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lastRequestRecievedTimestamp: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var setName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tileIds: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var periodicPassBySet: Swift.Bool {
    @objc get
    @objc set
  }
}
@available(iOS 13.0, *)
public struct BelongsToProfile {
}
@_hasMissingDesignatedInitializers public class AccountCache : Swift.Codable, Swift.Equatable {
  public static func == (lhs: SerendipityLO.AccountCache, rhs: SerendipityLO.AccountCache) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension SerendipityLO.ArticleKeys : Swift.Equatable {}
extension SerendipityLO.ArticleKeys : Swift.Hashable {}
extension SerendipityLO.ArticleKeys : Swift.RawRepresentable {}
extension SerendipityLO.UIModeType : Swift.Equatable {}
extension SerendipityLO.UIModeType : Swift.Hashable {}
extension SerendipityLO.ExternalConnectionSource : Swift.Equatable {}
extension SerendipityLO.ExternalConnectionSource : Swift.Hashable {}
extension SerendipityLO.ExternalConnectionSource : Swift.RawRepresentable {}
extension SerendipityLO.ConnectionEventDirection : Swift.Equatable {}
extension SerendipityLO.ConnectionEventDirection : Swift.Hashable {}
extension SerendipityLO.ConnectionEventDirection : Swift.RawRepresentable {}
@available(iOS 13.0, *)
extension SerendipityLO.CovaticWebView : Swift.Sendable {}
@available(iOS 13.0, *)
extension SerendipityLO.CovaticWebView.Coordinator : Swift.Sendable {}
extension SerendipityLO.ConsumptionEventType : Swift.Equatable {}
extension SerendipityLO.ConsumptionEventType : Swift.Hashable {}
extension SerendipityLO.ConsumptionEventType : Swift.RawRepresentable {}
extension SerendipityLO.ConsumptionEventMediaFormat : Swift.Equatable {}
extension SerendipityLO.ConsumptionEventMediaFormat : Swift.Hashable {}
extension SerendipityLO.ConsumptionEventMediaFormat : Swift.RawRepresentable {}
extension SerendipityLO.ConsumptionEventActivity : Swift.Equatable {}
extension SerendipityLO.ConsumptionEventActivity : Swift.Hashable {}
extension SerendipityLO.ConsumptionEventActivity : Swift.RawRepresentable {}
extension SerendipityLO.AccountParam : Swift.Equatable {}
extension SerendipityLO.AccountParam : Swift.Hashable {}
extension SerendipityLO.AccountParam : Swift.RawRepresentable {}
extension SerendipityLO.CovaticWebViewNavigation : Swift.Equatable {}
extension SerendipityLO.CovaticWebViewNavigation : Swift.Hashable {}
extension SerendipityLO.MediaConsumption.Action : Swift.Equatable {}
extension SerendipityLO.MediaConsumption.Action : Swift.Hashable {}
extension SerendipityLO.MediaConsumption.Action : Swift.RawRepresentable {}
extension SerendipityLO.MediaConsumption.MediaDelivery : Swift.Equatable {}
extension SerendipityLO.MediaConsumption.MediaDelivery : Swift.Hashable {}
extension SerendipityLO.MediaConsumption.MediaDelivery : Swift.RawRepresentable {}
extension SerendipityLO.ContentInteraction : Swift.Equatable {}
extension SerendipityLO.ContentInteraction : Swift.Hashable {}
extension SerendipityLO.ContentInteraction : Swift.RawRepresentable {}
extension SerendipityLO.AccountAction : Swift.Equatable {}
extension SerendipityLO.AccountAction : Swift.Hashable {}
extension SerendipityLO.AccountAction : Swift.RawRepresentable {}
extension SerendipityLO.PageType : Swift.Equatable {}
extension SerendipityLO.PageType : Swift.Hashable {}
extension SerendipityLO.PageType : Swift.RawRepresentable {}
extension SerendipityLO.APIError : Swift.Equatable {}
extension SerendipityLO.APIError : Swift.Hashable {}
@available(*, deprecated, message: "Type no longer used")
extension SerendipityLO.AppState : Swift.Equatable {}
@available(*, deprecated, message: "Type no longer used")
extension SerendipityLO.AppState : Swift.Hashable {}
@available(*, deprecated, message: "Type no longer used")
extension SerendipityLO.AppState : Swift.RawRepresentable {}
